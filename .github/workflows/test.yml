name: Test Frontend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run build

    - name: Check for Next.js build errors
      run: |
        # Ensure the build completed successfully
        if [ ! -d ".next" ]; then
          echo "Build failed - .next directory not found"
          exit 1
        fi
        echo "Build successful!"

  build-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      env:
        NEXT_PUBLIC_API_URL: https://example.com/api
      run: npm run build

    - name: Test Docker build
      run: |
        # Create a temporary Dockerfile for testing
        cat > Dockerfile << 'EOF'
        FROM node:18-alpine AS base
        RUN apk add --no-cache libc6-compat
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production && npm cache clean --force
        COPY . .
        RUN npm run build
        EXPOSE 3000
        CMD ["npm", "start"]
        EOF
        
        # Test that Docker image builds
        docker build -t frontend-test .
        echo "Docker build successful!"