name: Deploy Frontend to GCP Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.ts'
      - 'tailwind.config.ts'
      - 'tsconfig.json'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: strava-coverage-frontend

jobs:
  deploy:
    name: Deploy Frontend to Cloud Run
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Next.js app
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      run: npm run build

    - name: Validate secrets
      run: |
        echo "Checking required secrets..."
        if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
          echo "❌ GCP_PROJECT_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "❌ GCP_SA_KEY secret is not set"
          exit 1
        fi
        echo "✅ Required secrets are present"
        
        # Validate JSON format
        echo "Validating GCP_SA_KEY format..."
        if [[ "${{ secrets.GCP_SA_KEY }}" == "{"* ]]; then
          echo "✅ GCP_SA_KEY appears to be JSON format"
        else
          echo "❌ GCP_SA_KEY does not appear to be JSON format"
          exit 1
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Verify authentication
      run: |
        echo "Checking authentication..."
        gcloud auth list
        gcloud config get-value project

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Create Dockerfile for production
      run: |
        cat > Dockerfile << 'EOF'
        # Multi-stage build for Next.js
        FROM node:18-alpine AS base
        
        # Install dependencies only when needed
        FROM base AS deps
        RUN apk add --no-cache libc6-compat
        WORKDIR /app
        
        COPY package.json package-lock.json* ./
        RUN npm ci --only=production && npm cache clean --force
        
        # Rebuild the source code only when needed
        FROM base AS builder
        WORKDIR /app
        COPY --from=deps /app/node_modules ./node_modules
        COPY . .
        
        ENV NEXT_TELEMETRY_DISABLED 1
        RUN npm run build
        
        # Production image, copy all the files and run next
        FROM base AS runner
        WORKDIR /app
        
        ENV NODE_ENV production
        ENV NEXT_TELEMETRY_DISABLED 1
        
        RUN addgroup --system --gid 1001 nodejs
        RUN adduser --system --uid 1001 nextjs
        
        COPY --from=builder /app/public ./public
        
        COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
        COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
        
        USER nextjs
        
        EXPOSE 3000
        
        ENV PORT 3000
        ENV HOSTNAME "0.0.0.0"
        
        CMD ["node", "server.js"]
        EOF

    - name: Update next.config.ts for standalone
      run: |
        # Add standalone output configuration if not present
        if ! grep -q "output.*standalone" next.config.ts; then
          sed -i "s/const nextConfig = {/const nextConfig = {\n  output: 'standalone',/" next.config.ts
        fi

    - name: Build and push Docker image
      run: |
        # Build the image
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        
        # Push to Google Container Registry
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        
        # Tag as latest
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --set-env-vars NODE_ENV=production \
          --set-env-vars NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} \
          --project $PROJECT_ID

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)' --project=$PROJECT_ID)
        echo "Frontend deployed to: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Run smoke test
      run: |
        # Wait a moment for deployment to be ready
        sleep 10
        
        # Test that the frontend is accessible
        curl -f $SERVICE_URL || exit 1
        echo "Frontend health check passed!"